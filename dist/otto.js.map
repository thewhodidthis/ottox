{"version":3,"file":"otto.js","sources":["../index.es"],"sourcesContent":["// # Otto\n// Helps deal with CAs\n\n// Wrap\nconst myMod = (a, b) => a - (b * Math.floor(a / b));\n\n// Int to bin in array form\nconst parseRule = (rule) => {\n  // To binary string\n  const code = rule.toString(2);\n\n  // Minimum of 10 digits here\n  const view = `0000000000000000000000000000000${code}`.substr(32 - code.length).split('').reverse();\n\n  return view;\n};\n\nconst otto = {\n  // Sensible defaults\n  size: 1,\n\n  // Sierpinski\n  rule: 90,\n\n  // Yer typical l, c, r\n  ends: [-1, 0, 1],\n\n  // Flip cell middle\n  seed: (v, i, view) => i === Math.floor(view.length * 0.5),\n\n  // Ruleset index based lookup\n  stat: (code, hood) => {\n    const stats = parseInt(hood.join('').toString(2), 2);\n    const state = code[stats];\n\n    return state;\n  },\n};\n\nconst Otto = (opts) => {\n  const { size, rule, ends, stat, seed } = Object.assign({}, otto, opts);\n\n  // Ruleset\n  const code = parseRule(rule);\n\n  // Calculate state\n  const getState = (v, i, view) => {\n    const hood = ends.map((diff) => {\n      const site = myMod(diff + i, view.length);\n      const flag = view[site];\n\n      return flag;\n    });\n\n    return stat(code, hood, v);\n  };\n\n  // Cells, zero filled, needs some more work to become of adjustable size\n  let next = new Uint8Array(size);\n\n  // Result\n  let grid;\n\n  // Flip cell in middle on init\n  next = next.map(seed);\n\n  // Use this\n  return () => {\n    // Update\n    grid = next;\n\n    // Save for later\n    next = grid.map(getState);\n\n    // The previous generation\n    return grid;\n  };\n};\n\nexport default Otto;\n\n"],"names":["myMod","a","b","Math","floor","parseRule","rule","code","toString","view","substr","length","split","reverse","otto","size","ends","seed","v","i","stat","hood","stats","parseInt","join","state","Otto","opts","Object","assign","getState","map","diff","site","flag","next","Uint8Array","grid"],"mappings":"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"}