{"version":3,"file":"otto.js","sources":["../index.es"],"sourcesContent":["// # Otto\n// Helps deal with CAs\n\n// Wrap index round edges\n// http://stackoverflow.com/questions/1082917/mod-of-negative-number-is-melting-my-brain\nconst mod = (a, b) => a - (b * Math.floor(a / b));\nconst sum = (a, b) => a + b;\nconst glu = (a, b, i) => a | (b << i);\n\nconst Otto = ({ rule = 90, rows = 1, cols = 1, span = 1 } = {}) => {\n  // Grid size\n  const area = rows * cols;\n\n  // The neighborhood, store distance from each neighbor\n  const hood = rows > 1 ? [0, cols, -cols, 1, -1] : ((arr) => {\n    for (let i = 0, max = 1 + (2 * span); i < max; i += 1) {\n      arr.push(span - i);\n    }\n\n    return arr;\n  })([]);\n\n  // Decide type of sum\n  const getSum = rows > 1 ? sum : glu;\n\n  // Calculate state\n  const getState = (v, i, arr) => {\n    const state = hood.map((diff) => {\n      const site = mod(diff + i, arr.length);\n      const flag = arr[site];\n\n      // Just works :)\n      return (diff === 0 && flag === 1 && rows > 1) ? hood.length : flag;\n    }).reduce(getSum);\n\n    return rule & (1 << state) ? 1 : 0;\n  };\n\n  // Cells, zero filled\n  let memo = new Int8Array(area);\n\n  // Result\n  let grid;\n\n  return ((seed) => {\n    // Flip cell in middle on init\n    memo[seed] = 1;\n\n    return () => {\n      // Update\n      grid = memo;\n\n      // Save for later\n      memo = grid.map(getState);\n\n      // The previous generation\n      return grid;\n    };\n  })(Math.floor(area * 0.5));\n};\n\nexport default Otto;\n\n"],"names":["mod","a","b","Math","floor","sum","glu","i","Otto","rule","rows","cols","span","area","hood","arr","max","push","getSum","getState","v","state","map","diff","site","length","flag","reduce","memo","Int8Array","grid","seed"],"mappings":";;;EAAA;AACA,EAAA;;AAEA,EAAA;AACA,EAAA;AACA,MAAMA,MAAM,SAANA,GAAM,CAACC,CAAD,EAAIC,CAAJ;AAAA,EAAA,SAAUD,IAAKC,IAAIC,KAAKC,KAAL,CAAWH,IAAIC,CAAf,CAAnB;AAAA,EAAA,CAAZ;AACA,MAAMG,MAAM,SAANA,GAAM,CAACJ,CAAD,EAAIC,CAAJ;AAAA,EAAA,SAAUD,IAAIC,CAAd;AAAA,EAAA,CAAZ;AACA,MAAMI,MAAM,SAANA,GAAM,CAACL,CAAD,EAAIC,CAAJ,EAAOK,CAAP;AAAA,EAAA,SAAaN,IAAKC,KAAKK,CAAvB;AAAA,EAAA,CAAZ;;AAEA,MAAMC,OAAO,SAAPA,IAAO,GAAsD;AAAA,EAAA,iFAAP,EAAO;AAAA,EAAA,uBAAnDC,IAAmD;AAAA,EAAA,MAAnDA,IAAmD,6BAA5C,EAA4C;AAAA,EAAA,uBAAxCC,IAAwC;AAAA,EAAA,MAAxCA,IAAwC,6BAAjC,CAAiC;AAAA,EAAA,uBAA9BC,IAA8B;AAAA,EAAA,MAA9BA,IAA8B,6BAAvB,CAAuB;AAAA,EAAA,uBAApBC,IAAoB;AAAA,EAAA,MAApBA,IAAoB,6BAAb,CAAa;;AACjE,EAAA;AACA,EAAA,MAAMC,OAAOH,OAAOC,IAApB;;AAEA,EAAA;AACA,EAAA,MAAMG,OAAOJ,OAAO,CAAP,GAAW,CAAC,CAAD,EAAIC,IAAJ,EAAU,CAACA,IAAX,EAAiB,CAAjB,EAAoB,CAAC,CAArB,CAAX,GAAsC,UAACI,GAAD,EAAS;AAC1D,EAAA,SAAK,IAAIR,IAAI,CAAR,EAAWS,MAAM,IAAK,IAAIJ,IAA/B,EAAsCL,IAAIS,GAA1C,EAA+CT,KAAK,CAApD,EAAuD;AACrDQ,EAAAA,UAAIE,IAAJ,CAASL,OAAOL,CAAhB;AACD,EAAA;;AAED,EAAA,WAAOQ,GAAP;AACD,EAAA,GANiD,CAM/C,EAN+C,CAAlD;;AAQA,EAAA;AACA,EAAA,MAAMG,SAASR,OAAO,CAAP,GAAWL,GAAX,GAAiBC,GAAhC;;AAEA,EAAA;AACA,EAAA,MAAMa,WAAW,SAAXA,QAAW,CAACC,CAAD,EAAIb,CAAJ,EAAOQ,GAAP,EAAe;AAC9B,EAAA,QAAMM,QAAQP,KAAKQ,GAAL,CAAS,UAACC,IAAD,EAAU;AAC/B,EAAA,UAAMC,OAAOxB,IAAIuB,OAAOhB,CAAX,EAAcQ,IAAIU,MAAlB,CAAb;AACA,EAAA,UAAMC,OAAOX,IAAIS,IAAJ,CAAb;;AAEA,EAAA;AACA,EAAA,aAAQD,SAAS,CAAT,IAAcG,SAAS,CAAvB,IAA4BhB,OAAO,CAApC,GAAyCI,KAAKW,MAA9C,GAAuDC,IAA9D;AACD,EAAA,KANa,EAMXC,MANW,CAMJT,MANI,CAAd;;AAQA,EAAA,WAAOT,OAAQ,KAAKY,KAAb,GAAsB,CAAtB,GAA0B,CAAjC;AACD,EAAA,GAVD;;AAYA,EAAA;AACA,EAAA,MAAIO,OAAO,IAAIC,SAAJ,CAAchB,IAAd,CAAX;;AAEA,EAAA;AACA,EAAA,MAAIiB,aAAJ;;AAEA,EAAA,SAAQ,UAACC,IAAD,EAAU;AAChB,EAAA;AACAH,EAAAA,SAAKG,IAAL,IAAa,CAAb;;AAEA,EAAA,WAAO,YAAM;AACX,EAAA;AACAD,EAAAA,aAAOF,IAAP;;AAEA,EAAA;AACAA,EAAAA,aAAOE,KAAKR,GAAL,CAASH,QAAT,CAAP;;AAEA,EAAA;AACA,EAAA,aAAOW,IAAP;AACD,EAAA,KATD;AAUD,EAAA,GAdM,CAcJ3B,KAAKC,KAAL,CAAWS,OAAO,GAAlB,CAdI,CAAP;AAeD,EAAA,CAlDD,CAoDA;;;;"}